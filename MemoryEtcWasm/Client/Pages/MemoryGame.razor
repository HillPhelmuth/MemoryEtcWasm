@using MemoryEtcWasm.Shared.Models;
@using MemoryEtcWasm.Shared.ExtensionMethods


@if (!begin)
{
    <div class="text-center" style="margin-top:2em">
        <h2 class="">Memory Game</h2>
        <br />
        <p>Select <strong>difficulty</strong> and <strong>number of players</strong></p>
        @*<MatSelect Label="select difficulty" @bind-Value="Difficulty">
                <MatOptionString Value="easy">Easy</MatOptionString>
                <MatOptionString Value="medium">Medium</MatOptionString>
                <MatOptionString Value="hard">Hard</MatOptionString>
            </MatSelect>*@
        <CascadingValue Value="addChange">
            <SelectPlayers DifficultyChanged="DifficultyChangeHandler" @bind-playerCount="playerCount" />
        </CascadingValue>
        @*<p>
            <MatNumericUpDownField Label="How Many Players?" @bind-Value="playerCount" DecimalPlaces=0 Minimum=1 Maximum=4 @onkeyup="KeyBoardCreate">
            </MatNumericUpDownField>
        </p>*@
        @*<button class="btn btn-primary" @onclick=@(() => CreatePlayers(playerCount))>Add Players</button>*@
        @if (addNames)
        {
            <div class="nameList">
                <br />
                <p style="font-weight:600">Choose Names</p>
                @foreach (var player in Players)
                {
                    <p class="name">
                        @{var label = $"player {player.Order}";}
                        <MatStringField @bind-Value="player.Name" Label="@label"></MatStringField>
                    </p>
                }
            </div>
            <button class="btn btn-primary" @onclick="AddNamesAndStart">Begin Game</button>
        }
    </div>
}
else
{
    <div class="row">
        <div class="col">
            <button class="btn btn-secondary" style="margin-left:3em" @onclick="Restart">Reset</button><br />
            @foreach (var player in Players)
            {
                string cssClassName = $"player{player.Order}";
                <span class="@cssClassName">
                    <b>@player.Name</b> Games Won: @player.GamesWon;
                </span>
                <br />
            }
        </div>
        <div class="col">
            <h1>Memory Game</h1>
        </div>

    </div>
    <div class="row">
        <div class="col sideBoard">
            <br />
            <button class="btn btn-primary" style="margin-left:3em" @onclick="NewGame">New Game</button>
            <p style="line-height:1.5; font-size:large">
                @foreach (var player in Players)
                {
                    string cssClassName = $"player{player.Order}";
                    <span class="@cssClassName">
                        <b>@player.Name</b> Score: @player.Score;
                    </span>
                    <br />
                }
            </p>

            <h3>
                @CurrentPlayer.Name's Turn!
            </h3>
        </div>

        <div class="col" style="width:61em; margin-left:1em">
            @if (isOver)
            {
                string cssClassName = $"player{Winner.Order}";
                <h1 class="blinking @cssClassName" style="padding-left:2em">@Winner.Name Wins!</h1>
            }
            <h4>
                @result<span style="margin-left:3em">@CurrentPlayer.Name's Turn!</span>
            </h4>
            @if (boardVidible)
            {
                <div class="@Difficulty mat-elevation-z24" style="background-color:darkblue; padding:.5em">

                    @foreach (var card in Cards)
                    {
                        <div class="card memcard" @onclick="@(() => SelectCard(card))">
                            @if (card.IsFlipped)
                            {
                                <img src="@card.Face" style="width:9em; height:9em">
                            }
                            else
                            {
                                <p class="text-center" style="font-size:x-large; color:darkblue; padding-top:2em"> Select Card</p>
                            }
                        </div>
                    }
                </div>
            }
            else
            {
                <p>Select <strong>difficulty</strong></p>
                <CascadingValue Value="addChange">
                    <SelectPlayers DifficultyChanged="DifficultyChangeHandler" @bind-playerCount="playerCount" />
                </CascadingValue>
            }
        </div>
    </div>
}
@code {
    MemoryBoard Board { get; set; }
    List<MemoryCard> Cards { get; set; }
    MemoryCard PreviousCard { get; set; }
    string Difficulty { get; set; }
    Player Winner { get; set; }
    List<Player> Players { get; set; }
    Player CurrentPlayer { get; set; }
    string result = "";
    [Parameter]
    public string addChange { get; set; } = "Add";
    bool isOver = false;
    bool begin = false;
    bool lockCards = false;
    bool addNames = false;
    bool boardVidible = true;
    int selections = 0;
    int playerCount = 1;
    int currentTurn = 1;

    async Task StartGame()
    {
        await Task.Run(() =>
        {
            if (string.IsNullOrEmpty(Difficulty))
                Difficulty = "easy";
            Board = new MemoryBoard(Difficulty);
            Console.WriteLine("Difficulty set to: " + Difficulty);
            currentTurn = 1;
            Cards = Board.Board.ToList();
            Console.WriteLine($"no. of Cards (page): {Cards.Count()}");
            foreach (var card in Cards)
            {
                card.IsFlipped = false;
            }
            Cards.Shuffle();
            CurrentPlayer = Players.Where(x => x.Order == currentTurn).FirstOrDefault();
        });
        begin = true;
        addChange = "Change";
        Console.WriteLine("game began");

    }
    void Restart()
    {
        result = "";
        isOver = false;
        begin = false;
        addNames = false;
        selections = 0;
        playerCount = 1;
        currentTurn = 1;
        Board = null;
        addChange = "Add";
        StateHasChanged();
    }
    void NewGame()
    {
        result = "";
        isOver = false;
        Board = null;
        currentTurn = 1;
        selections = 0;
        boardVidible = false;
        foreach (var player in Players)
        {
            player.Score = 0;
        }
        StateHasChanged();


    }
    public async Task SelectCard(MemoryCard card)
    {
        if (card.IsFlipped)
            return;

        if (lockCards)
            return;

        card.IsFlipped = true;
        selections += 1;
        if (selections == 2 && card.Face == PreviousCard.Face)
        {
            var playerScore = Players.Where(x => x.Order == currentTurn).FirstOrDefault();
            playerScore.Score += 1;
            result = "Match!";
            selections = 0;
            DetermineWinner();
            SwitchPlayers();
            return;
        }
        if (selections == 2 && card.Face != PreviousCard.Face)
        {
            lockCards = true;
            result = "No Match, Try again!";
            selections = 0;
            await Task.Delay(3000);
            card.IsFlipped = false;
            PreviousCard.IsFlipped = false;
            SwitchPlayers();
            lockCards = false;
            return;
        }
        PreviousCard = card;
    }
    void SwitchPlayers()
    {
        if (currentTurn == playerCount)
            currentTurn = 1;
        else
            currentTurn += 1;
        CurrentPlayer = Players.Where(x => x.Order == currentTurn).FirstOrDefault();
    }
    async Task CreatePlayers(int playerCount)
    {
        if (playerCount > 4)
            playerCount = 4;
        Players = new List<Player>();
        await Task.Run(() =>
        {
            for (int i = 1; i <= playerCount; i++)
            {
                var player = new Player() { Order = i, Score = 0 };
                Players.Add(player);
            }
        });
        addNames = true;
    }
    async Task AddNamesAndStart()
    {
        await StartGame();
        begin = true;
    }

    void DetermineWinner()
    {
        var flipCount = Cards.Where(x => x.IsFlipped).Count();
        if (flipCount != Cards.Count())
        {
            return;
        }
        if (Players.Count() > 1)
        {
            var toptwo = Players.OrderByDescending(x => x.Score).Take(2).ToList();
            var winner = toptwo[0].Score != toptwo[1].Score ? toptwo[0] : new Player() { Name = "No one" };
            winner.GamesWon++;
            Winner = winner;
        }
        else
        {
            var winner = Players.First();
            winner.GamesWon++;
            Winner = winner;
        }
        result = $"Game Over!";
        isOver = true;
    }
    async void DifficultyChangeHandler(string difficutly)
    {
        StateHasChanged();
        Console.WriteLine("ChangeHandlerRun");
        Difficulty = difficutly;
        boardVidible = true;
        if (addChange == "Add")
        {
            var count = playerCount;
            await CreatePlayers(count);
            Console.WriteLine($"ran createPlayers with playerCount {count}");
            await Task.Run(() => StateHasChanged());
        }
        else
        {
            await AddNamesAndStart();
            StateHasChanged();
        }

    }
   


}
